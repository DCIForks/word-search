let charCount,neighbours,anagrams,reversedWords,palindromes;function setWordList(e){const r=_wordListIsInvalid(e);return r||(charCount=e[0].length,_setNeighbours(e),_setAnagrams(e),_setReversedAWordsAndPalindromes(e),e.length)}function findAnagrams(e){if(e){const r=[...e].sort().join("");return anagrams[r]||[]}return Object.values(anagrams)}function findPalindromes(){return[...palindromes]}function findReversedWords(){return[...reversedWords]}function findNeighbours(e){return e?neighbours[e]||[]:Object.keys(neighbours)}function findLadders(e,r){if(!neighbours||!neighbours[e]||!neighbours[r])return[];let n=[[r]];const s=new Set;let t=!1;for(;!t;){const r=new Set,o=n.length;for(let d=0;d<o;d+=1){const o=n.shift();neighbours[o[0]].forEach(d=>(s.has(d)||(n.push([d,...o]),d===e?t=!0:r.add(d)),!0))}t||(r.size?r.forEach(s.add,s):(n.length=0,t=!0))}return n=n.filter(r=>r[0]===e)}function findAnagramLadders(e){let r,n,s,t=[],o=[],d=[],a=!0;if("=reversed"===e?(s=findReversedWords(),e=""):(("string"==typeof e||Array.isArray(e))&&(r=e.includes("=short"),n=e.includes("=long"),(r||n)&&(e="",a=!1)),s=findAnagrams(e)),s&&s.length){let i=[];e?s.forEach(r=>{e!==r&&i.push([e,r])}):s.forEach(e=>{const r=e.length;if(2===r)i.push(e);else for(let n=0;n<r;n+=1)for(let s=n+1;s<r;s+=1)i.push([e[n],e[s]])});let u=0,f=999;i.forEach(([e,s])=>{const i=findLadders(e,s),h=i.length&&i[0].length;a?h&&t.push(i):h&&(r&&(f>h&&(f=h,d.length=0),f===h&&d.push(...i)),n&&(u<h&&(u=h,o.length=0),u===h&&o.push(...i)))})}return n?r?{shortest:d,longest:o}:o:r?d:(t.sort((e,r)=>e[0].length-r[0].length),t)}function findSimpleLadders(e,r){let n=[e];const s=[];let t=[],o=charCount;for(;o--;)n.forEach(e=>{const r=neighbours[e];r&&r.forEach(e=>{t.indexOf(e)<0&&(t.push(e),s.push(e))})}),n=[...s],s.length=0;return r&&(n=n.filter(r=>[...r].every((r,n)=>e[n]!==r))),n.map(r=>findLadders(e,r))}function findGoodStarters(){let e={},r=0;const n=charCount+1,s=Object.keys(neighbours);var t=s.length;for(let o=0;o<t;o+=1){const d=s[o];for(let a=o+1;a<t;a+=1){ladders=findLadders(d,s[a]);const t=ladders.length;t&&(length=ladders[0].length,length<n||(r+=t,e[d]=(e[d]||0)+t,ladders.forEach(r=>{const n=r.pop();e[n]=(e[n]||0)+1})))}}let o=Object.keys(e).sort((r,n)=>e[n]-e[r]);return{ranking:o=o.reduce((r,n)=>(r[n]=e[n],r),{}),count:r}}function _setAnagrams(e){anagrams={},e.forEach(e=>{const r=[...e].sort().join("");(anagrams[r]||(anagrams[r]=[])).push(e)}),anagrams=Object.entries(anagrams).reduce((e,[r,n])=>(n.length>1&&(e[r]=n.sort()),e),{}),anagrams=Object.keys(anagrams).sort((e,r)=>anagrams[e][0].localeCompare(anagrams[r][0])).reduce((e,r)=>(e[r]=anagrams[r],e),{})}function _setReversedAWordsAndPalindromes(e){reversedWords=[],palindromes=[],(e=[...e]).forEach((r,n)=>{const s=[...r].reverse().join(""),t=e.indexOf(s);t>-1&&(t===n?palindromes.push(r):(reversedWords.push([r,s].sort()),e.splice(t,1)))}),reversedWords.sort((e,r)=>e[0].localeCompare(r[0])),palindromes.sort()}function _isNeighbour(e,r){let n=0;const s=e.length;for(let t=0;t<s;t+=1)if(e[t]!==r[t]&&n++)return!1;return!0}function _setNeighbours(e){neighbours={};const r=e.length;for(let n=0;n<r;n+=1){const s=e[n];for(let t=n+1;t<r;t+=1){const r=e[t];_isNeighbour(s,r)&&((neighbours[s]||(neighbours[s]=[])).push(r),(neighbours[r]||(neighbours[r]=[])).push(s))}}neighbours=Object.keys(neighbours).sort().reduce((e,r)=>(e[r]=neighbours[r].sort(),e),{})}function _wordListIsInvalid(e){if(!Array.isArray(e)){return`setWordList ERROR: expected an array, received <${typeof e}>`}const r=e[0];if("string"!=typeof r)return"setWordList ERROR: first word is not a string";const n=r.length;return!e.every(e=>"string"==typeof e&&e.length===n)&&`setWordList ERROR: all entries must be words of the same length (${n} letters expected)`}module.exports={setWordList:setWordList,findNeighbours:findNeighbours,findAnagrams:findAnagrams,findReversedWords:findReversedWords,findPalindromes:findPalindromes,findLadders:findLadders,findAnagramLadders:findAnagramLadders,findSimpleLadders:findSimpleLadders,findGoodStarters:findGoodStarters};